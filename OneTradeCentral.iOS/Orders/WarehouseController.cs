// This file has been autogenerated from parsing an Objective-C header file added in Xcode.
using System;
using System.Collections.Generic;
using System.Linq;
using Foundation;
using UIKit;
using OneTradeCentral.DTOs;

namespace OneTradeCentral.iOS
{
	public partial class WarehouseController : UIViewController
	{
		static IList<ProviderWarehouse> warehouseList;
		static IList<ProviderWarehouse> sourceProviderWarehouseList;
		public OrderViewController OrderController { get; set; }

		public WarehouseController (IntPtr handle) : base (handle)
		{
		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();

			DALFacade dal = new DALFacade ();

			sourceProviderWarehouseList = dal.getWarehouseListByProviderID (OrderController.ProviderID);
			warehouseList = sourceProviderWarehouseList;
	
			WarehousePicker.Model = new WarehousePickerModel (OrderController);
			//			warehouseSource = new WarehousePickerModel ();

			// This event will fire, when the search bar is keyed-in with string.
			searchBar.TextChanged += (object sender, UISearchBarTextChangedEventArgs e) => {

				warehouseList = FilteredProviderWarehouse(sourceProviderWarehouseList, this.searchBar.Text);

				if(warehouseList.Count == 1){
					OrderController.SelectWarehouse (warehouseList[0]);
				}
				else{
					if(warehouseList.Count == 0){
						OrderController.SelectWarehouse (new ProviderWarehouse());
					}
					else{
						OrderController.SelectWarehouse (warehouseList[0]);
					}
				}


				WarehousePicker.Model = new WarehousePickerModel (OrderController);
			};
		}

		// This method searches for the keyed-in text within every Provider Warehouse's name in the list.
		private IList<ProviderWarehouse> FilteredProviderWarehouse(IList<ProviderWarehouse>sourceProviderWarehouseList, string searchString){
			IList<ProviderWarehouse> tmpProviderWarehouseList = new List<ProviderWarehouse>();

			foreach(ProviderWarehouse prov in sourceProviderWarehouseList){
				if(prov.Name.ToUpper().Contains(searchString.ToUpper()) == true){
					tmpProviderWarehouseList.Add(prov);
				}
			}

			return tmpProviderWarehouseList;
		}

		public override void ViewDidAppear (bool animated)
		{
			base.ViewDidAppear (animated);

			if (warehouseList.Count () > 0) {
				Customer c = OrderController.SelectedCustomer;
				var selectedRow = 0;
				ProviderWarehouse selectedWarehouse = warehouseList [0];
				if (c != null && c.PK > 0) {
					string stateCode = c.StateCode == null ? "" : c.StateCode;
					var warehouseQuery = warehouseList.Where (w => w.Name.Contains (stateCode));
					if (warehouseQuery != null && warehouseQuery.Count () > 0) {
						selectedWarehouse = warehouseQuery.First ();
//					WarehousePicker.Model.Selected (WarehousePicker, i, 0);
					}
				} 
				selectedRow = warehouseList.IndexOf (selectedWarehouse);
				WarehousePicker.Select (selectedRow, 0, false);
				OrderController.SelectWarehouse (selectedWarehouse);
			}
		}

		public class WarehousePickerModel : UIPickerViewModel
		{
			public OrderViewController _orderViewController;

			public WarehousePickerModel(OrderViewController orderViewController) {
				this._orderViewController = orderViewController;
			}

			public override nint GetComponentCount (UIPickerView picker)
			{
				return 1;
			}

			public override string GetTitle (UIPickerView picker, nint row, nint component)
			{
				return warehouseList[(int)row].Name;
			}

			public override nint GetRowsInComponent (UIPickerView picker, nint component)
			{
				return warehouseList.Count;
			}

			public override void Selected (UIPickerView picker, nint row, nint component)
			{
				_orderViewController.SelectWarehouse(warehouseList[(int)row]);
			}
		}
	}
}
